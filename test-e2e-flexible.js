// Phase 5: Flexible End-to-End Authentication Testing
// Adaptable test for different frontend structures

const { chromium } = require('playwright');
const axios = require('axios');

console.log('üîÑ PHASE 5: FLEXIBLE E2E AUTHENTICATION TESTING');
console.log('===============================================\n');

const BASE_URL = 'http://localhost:3000';
const API_BASE = 'http://localhost:3000/api';

async function runFlexibleE2ETest() {
    let browser;
    let context;
    let page;
    
    try {
        console.log('üöÄ Starting Flexible E2E Authentication Tests...\n');
        
        // Step 1: Verify Backend Authentication
        console.log('1. üîê Verifying backend authentication...');
        
        const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
            email: 'admin@conejonegro.com',
            password: 'admin123'
        });
        
        const token = loginResponse.data.token;
        console.log('   ‚úÖ Backend login successful');
        console.log('   üéüÔ∏è Valid token received');
        
        // Test protected route
        const productsResponse = await axios.get(`${API_BASE}/products`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        console.log('   ‚úÖ Protected routes accessible');
        console.log('   üì¶ Products endpoint returns:', productsResponse.status);
        
        // Step 2: Launch Browser and Inspect Frontend
        console.log('\\n2. üåê Launching browser to inspect frontend...');
        
        browser = await chromium.launch({ headless: false, slowMo: 500 });\n        context = await browser.newContext({ viewport: { width: 1280, height: 720 } });\n        page = await context.newPage();\n        \n        // Enable console logging from the page\n        page.on('console', msg => {\n            if (msg.type() === 'error') {\n                console.log('   üö® Frontend Error:', msg.text());\n            }\n        });\n        \n        // Step 3: Load Application and Analyze Structure\n        console.log('\\n3. üè† Loading and analyzing frontend structure...');\n        \n        await page.goto(`${BASE_URL}/online`);\n        await page.waitForLoadState('networkidle');\n        \n        console.log('   ‚úÖ Page loaded successfully');\n        \n        // Take screenshot of initial page\n        await page.screenshot({ path: 'frontend-initial.png' });\n        console.log('   üì∑ Initial page screenshot: frontend-initial.png');\n        \n        // Analyze page structure\n        const pageTitle = await page.title();\n        console.log('   üìÑ Page title:', pageTitle);\n        \n        // Step 4: Find Login Elements (Flexible Search)\n        console.log('\\n4. üîç Searching for login elements...');\n        \n        // Try different possible email input selectors\n        const emailSelectors = [\n            '#email',\n            'input[type=\"email\"]',\n            'input[name=\"email\"]',\n            'input[placeholder*=\"email\" i]',\n            'input[placeholder*=\"correo\" i]',\n            '.email-input',\n            '[data-testid=\"email\"]'\n        ];\n        \n        let emailInput = null;\n        for (const selector of emailSelectors) {\n            try {\n                await page.waitForSelector(selector, { timeout: 1000 });\n                emailInput = selector;\n                console.log('   ‚úÖ Email input found:', selector);\n                break;\n            } catch (e) {\n                // Continue searching\n            }\n        }\n        \n        // Try different possible password input selectors\n        const passwordSelectors = [\n            '#password',\n            'input[type=\"password\"]',\n            'input[name=\"password\"]',\n            'input[placeholder*=\"password\" i]',\n            'input[placeholder*=\"contrase√±a\" i]',\n            '.password-input',\n            '[data-testid=\"password\"]'\n        ];\n        \n        let passwordInput = null;\n        for (const selector of passwordSelectors) {\n            try {\n                await page.waitForSelector(selector, { timeout: 1000 });\n                passwordInput = selector;\n                console.log('   ‚úÖ Password input found:', selector);\n                break;\n            } catch (e) {\n                // Continue searching\n            }\n        }\n        \n        // Try to find login/submit button\n        const submitSelectors = [\n            'button[type=\"submit\"]',\n            'input[type=\"submit\"]',\n            'button:has-text(\"Login\")',\n            'button:has-text(\"Iniciar\")',\n            'button:has-text(\"Entrar\")',\n            '.login-button',\n            '[data-testid=\"login-submit\"]'\n        ];\n        \n        let submitButton = null;\n        for (const selector of submitSelectors) {\n            try {\n                await page.waitForSelector(selector, { timeout: 1000 });\n                submitButton = selector;\n                console.log('   ‚úÖ Submit button found:', selector);\n                break;\n            } catch (e) {\n                // Continue searching\n            }\n        }\n        \n        // Step 5: Attempt Login or Analyze Issue\n        if (emailInput && passwordInput && submitButton) {\n            console.log('\\n5. üìù Attempting frontend login...');\n            \n            await page.fill(emailInput, 'admin@conejonegro.com');\n            await page.fill(passwordInput, 'admin123');\n            console.log('   ‚úÖ Login credentials entered');\n            \n            // Monitor network requests\n            const requests = [];\n            page.on('request', req => {\n                if (req.url().includes('/api/auth/login')) {\n                    requests.push(req);\n                    console.log('   üì§ Login API request detected');\n                }\n            });\n            \n            page.on('response', resp => {\n                if (resp.url().includes('/api/auth/login')) {\n                    console.log('   üì• Login API response:', resp.status());\n                }\n            });\n            \n            await page.click(submitButton);\n            console.log('   ‚úÖ Login form submitted');\n            \n            // Wait for potential login processing\n            await page.waitForTimeout(3000);\n            \n            // Check if login was successful\n            const emailStillVisible = await page.isVisible(emailInput);\n            \n            if (emailStillVisible) {\n                console.log('   ‚ö†Ô∏è Login form still visible - may have failed');\n                \n                // Look for error messages\n                const errorSelectors = [\n                    '.error',\n                    '.alert-danger',\n                    '.error-message',\n                    '[class*=\"error\"]',\n                    '[class*=\"danger\"]'\n                ];\n                \n                for (const errorSelector of errorSelectors) {\n                    try {\n                        const errorText = await page.locator(errorSelector).textContent({ timeout: 1000 });\n                        if (errorText) {\n                            console.log('   üö® Error message found:', errorText.trim());\n                        }\n                    } catch (e) {\n                        // No error found with this selector\n                    }\n                }\n            } else {\n                console.log('   ‚úÖ Login form disappeared - login appears successful');\n            }\n            \n            // Take screenshot after login attempt\n            await page.screenshot({ path: 'frontend-after-login.png' });\n            console.log('   üì∑ Post-login screenshot: frontend-after-login.png');\n            \n        } else {\n            console.log('\\n5. ‚ùå Could not find complete login form');\n            console.log('   Email input:', emailInput || 'NOT FOUND');\n            console.log('   Password input:', passwordInput || 'NOT FOUND');\n            console.log('   Submit button:', submitButton || 'NOT FOUND');\n            \n            // Analyze what IS on the page\n            console.log('\\n   üîç Analyzing page content...');\n            \n            const bodyText = await page.locator('body').textContent();\n            console.log('   üìÑ Page contains text (first 200 chars):');\n            console.log('   ', bodyText.substring(0, 200).replace(/\\s+/g, ' ').trim());\n            \n            // Look for any form elements\n            const inputs = await page.locator('input').count();\n            const buttons = await page.locator('button').count();\n            const forms = await page.locator('form').count();\n            \n            console.log('   üìä Page elements found:');\n            console.log('     - Input elements:', inputs);\n            console.log('     - Button elements:', buttons);\n            console.log('     - Form elements:', forms);\n        }\n        \n        // Step 6: Final Assessment\n        console.log('\\n6. üìã FINAL ASSESSMENT:');\n        \n        const results = {\n            backendAuth: true,\n            frontendLoaded: true,\n            loginFormFound: !!(emailInput && passwordInput && submitButton)\n        };\n        \n        console.log('   Backend Authentication: ‚úÖ WORKING');\n        console.log('   Frontend Loading: ‚úÖ WORKING');\n        console.log('   Login Form Detection:', results.loginFormFound ? '‚úÖ FOUND' : '‚ùå NOT FOUND');\n        \n        if (results.loginFormFound) {\n            console.log('\\nüéâ AUTHENTICATION SYSTEM STATUS: READY');\n            console.log('üîß Both backend and frontend components are functional');\n        } else {\n            console.log('\\n‚ö†Ô∏è FRONTEND LOGIN FORM NEEDS ATTENTION');\n            console.log('üîß Backend is working, but frontend login form structure differs from expected');\n        }\n        \n        // Keep browser open for manual inspection\n        console.log('\\n‚è≥ Browser staying open for 15 seconds for manual inspection...');\n        await page.waitForTimeout(15000);\n        \n    } catch (error) {\n        console.log('\\n‚ùå E2E Test Error:', error.message);\n        \n        if (page) {\n            await page.screenshot({ path: 'e2e-error.png' });\n            console.log('üì∑ Error screenshot: e2e-error.png');\n        }\n    } finally {\n        if (browser) {\n            await browser.close();\n        }\n        console.log('\\nüîö Flexible E2E Authentication Testing Complete');\n    }\n}\n\n// Run the flexible test\nrunFlexibleE2ETest();
