name: 'Conejo Negro POS - CI/CD Pipeline'

on:
  push:
    branches: [ main, master, development ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

jobs:
  test:
    name: 'Run Tests & Linting'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4
      
    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 'Install Dependencies'
      run: npm ci
      
    - name: 'Run Security Audit'
      run: npm audit --audit-level high
      continue-on-error: true
      
    - name: 'Run Tests'
      run: npm test
      env:
        NODE_ENV: test
        
    - name: 'Check Code Style'
      run: |
        npx eslint server.js --format=compact || echo "ESLint not configured - skipping"
        
    - name: 'Test Server Startup'
      run: |
        timeout 10s npm start &
        sleep 5
        curl -f http://localhost:3000/api/health || exit 1
      env:
        NODE_ENV: test

  build:
    name: 'Build & Validate'
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4
      
    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 'Install Production Dependencies'
      run: npm ci --only=production
      
    - name: 'Validate Production Build'
      run: |
        echo "Validating production configuration..."
        node -c server.js
        echo "‚úÖ Server validation passed"

  deploy:
    name: 'Deploy to Render'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 'Trigger Render Deployment'
      run: |
        echo "üöÄ Triggering Render deployment..."
        curl -X POST "https://api.render.com/v1/services/${{ env.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ env.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": false}'
        echo "‚úÖ Deployment triggered successfully"
        
    - name: 'Wait for Deployment'
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30
        
    - name: 'Health Check'
      run: |
        echo "üîç Running post-deployment health check..."
        curl -f https://conejo-negro-pos.onrender.com/api/health || exit 1
        echo "‚úÖ Health check passed"

  notify:
    name: 'Deployment Notification'
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: 'Deployment Success'
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üåê Live URL: https://conejo-negro-pos.onrender.com"
        
    - name: 'Deployment Failure'
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs and try again."
        exit 1
